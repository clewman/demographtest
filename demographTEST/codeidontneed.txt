OLD CHART.JS
// scatter and line plots. Change out "mode" for "lines" or "markers"
//change out 'type' for 'scatter' (line and scatter plots), 'bar' (bar graphs)
// can either have plotly menu bar always on, hidden until mouseover, or completely hidden. See bottom of page for other options
// see about doing an "if scatter: change marker size" to make scatter plots bigger but not anything else


    // trace1 = {
    //     type: type,
    //     x: a,
    //     y: y,
    //     mode: mode,
    //     name: 'Red',
    //     line: {
    //         color: 'rgb(219, 64, 82)',
    //         width: 3
    //     },
    //     marker: {size: 12}
    // };
    //
    // trace2 = {
    //     type: type,
    //     x: x,
    //     y: y,
    //     mode: mode,
    //     name: 'Blue',
    //     line: {
    //         color: 'rgb(66, 244, 89)',
    //         width: 1
    //     },
    //     marker: {size: 12}
    // };
    //
    // var data = [trace1, trace2];
    //
    // var layout = {
    //     title: 'Title',
    //     showlegend: true
    // };
    //
    // Plotly.newPlot('finalGraph', data, layout, {displayModeBar: false});

// }


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

OLDCHART.JS


// scatter and line plots. Change out "mode" for "lines" or "markers"
//change out 'type' for 'scatter' (line and scatter plots), 'bar' (bar graphs)
// can either have plotly menu bar always on, hidden until mouseover, or completely hidden. See bottom of page for other options
// see about doing an "if scatter: change marker size" to make scatter plots bigger but not anything else


let chart_type_ddl = document.querySelector('#chart_type_ddl')
chart_type_ddl.onchange = function () {
    let type = chart_type_ddl.options[chart_type_ddl.selectedIndex].value
    let mode = chart_type_ddl.options[chart_type_ddl.selectedIndex].title
    let a = []
    myFunction(type, mode, a)
}



function myFunction(type, mode, a) {
    if (type === 'choropleth') {

        Plotly.d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

 var data = [{
              type: 'choropleth',
              locationmode: 'USA-states',
              locations: unpack(rows, 'code'),
              z: unpack(rows, 'total exports'),
              text: unpack(rows, 'state'),
              zmin: 0,
              zmax: 17000,
              colorscale: [
                [0, 'rgb(242,240,247)'], [0.2, 'rgb(218,218,235)'],
                [0.4, 'rgb(188,189,220)'], [0.6, 'rgb(158,154,200)'],
                [0.8, 'rgb(117,107,177)'], [1, 'rgb(84,39,143)']
              ],
            colorbar: {
              title: 'Millions USD',
              thickness: 0.2
            },
            marker: {
              line:{
                color: 'rgb(255,255,255)',
                width: 2
              }
            }
          }];

    console.log(data.locations);
      var layout = {
              title: '2011 US Agriculture Exports by State',
              geo:{
                scope: 'usa',
                showlakes: true,
                lakecolor: 'rgb(255,255,255)'
              }
          };
          Plotly.plot(finalGraph, data, layout, {showLink: false});
      });

    } else if (type == 'bar' || type == 'line' || type == 'scatter') {

        trace1 = {
            type: type,
            x: x,
            y: y,
            mode: mode,
            name: 'Red',
            line: {
                color: 'rgb(219, 64, 82)',
                width: 3
            },
            marker: {size: 12}
        };

        trace2 = {
            type: type,
            x: x,
            y: y,
            mode: mode,
            name: 'Blue',
            line: {
                color: 'rgb(66, 244, 89)',
                width: 1
            },
            marker: {size: 12}
        };

        var data = [trace1, trace2];

        var layout = {
            title: 'Title',
            showlegend: true
        };
    }

    else if (type == 'pie') {
        var data = [{
            values: a,
            labels: ['Residential', 'Non-Residential', 'Utility'],
            type: type
        }];
    }
    Plotly.newPlot('finalGraph', data, layout, {displayModeBar: false});
}



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

VIEW FOR PYTHON LINE/BAR CHARTS

def get_plotly_line_url(request):
    gender_id = request.GET.get('gender_id', '')
    education_level_id = request.GET.get('education_level_id', '')
    income_level_id = request.GET.get('income_level_id', '')
    year = request.GET.get('year', '')
    state_id = request.GET.get('state_id', '')


    items = IncomeData.objects.all()
    if gender_id != '':
        items = items.filter(gender_id=gender_id)
    if year != '':
        items = items.filter(year=year)
    if income_level_id != '':
        items = items.filter(income_level_id=income_level_id)
    if education_level_id != '':
        items = items.filter(education_level_id=education_level_id)
    if state_id != '':
        items2 = []
        for item in items:
            if state_id == item.county.state_id:
                items2.append(item)
        items = items2

    print('**************')
    print('[[[[[[[[[[[[[[[[[[[[')
    print(state_id)
    print(']]]]]]]]]]]]]]]]]]]]')
    print('**************')

    # The counter shows progress of load in terminal. The output creates a list of
    # all the abbr and pop values
    counter = 0
    output = {}
    for item in items:
        if item.county.state.abbr == '':
            continue

        if item.county.state.abbr in output:
            output[item.county.state.abbr] += item.population
        else:
            output[item.county.state.abbr] = item.population

        if counter % 10 == 0:
            print(f'{round(counter/len(items)*100,2)}%')
        counter += 1


    # this gets the state values, all of them. Not sure I need this.
    # abbr = list(output.keys())
    # state_values = list(output.values())
    # for state in State.objects.all():
    #     if state.abbr != '' and state.abbr not in abbr:
    #         abbr.append(state.abbr)
    #         state_values.append(0)

    # print(state_values[0])
    # print(abbr)

    years = list(set([item.year for item in items]))
    years.sort()





    female = go.Scatter(
        x = [year],
        y = [4, 5]
    )

    male = go.Scatter(
        x=[3, 4, 6],
        y=[2, 8],
    )

    all_genders = go.Scatter(
        x=[5, 8, 9],
        y=[12, 18]
    )

    data = [female, male, all_genders]

    url = py.plot(data, filename='basic-line' + str(counter), auto_open=False)
    print(url)
    return HttpResponse(url)


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++